from urllib.parse import urlparse

import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import xml.etree.ElementTree as ET
import requests
import time
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMINS = [784810066]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
DEFAULT_URL = 'https://www.nmls.ru/data/feed/yandex/agency1003479.xml'
NAMESPACE = '{http://webmaster.yandex.ru/schemas/feed/realty/2010-06}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
try:
    with open('data.json', 'r', encoding='utf-8') as f:
        properties = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    properties = []

try:
    with open('url.txt', 'r') as f:
        current_url = f.read().strip()
except FileNotFoundError:
    current_url = DEFAULT_URL

agents = list(set(prop['agent'] for prop in properties if 'agent' in prop))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard(user_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton("üë§ –ü–æ –∞–≥–µ–Ω—Ç—É"),
        KeyboardButton("üè† –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    ]
    if user_id in ADMINS:
        buttons.append(KeyboardButton("‚öôÔ∏è –°—Å—ã–ª–∫–∞ (–ê–¥–º–∏–Ω)"))
    markup.add(*buttons)
    return markup

def deal_type_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton("üè† –ê—Ä–µ–Ω–¥–∞"), KeyboardButton("üí∞ –ü—Ä–æ–¥–∞–∂–∞"))
    markup.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    return markup

def category_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    categories = [
        "üèòÔ∏è –í—Å–µ", "üè† 1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "üè† 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è",
        "üè† 3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "üè† 4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "üå≥ –£—á–∞—Å—Ç–æ–∫",
        "üè° –î–æ–º", "üöó –ì–∞—Ä–∞–∂", "üö™ –ö–æ–º–Ω–∞—Ç–∞", "üè™ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è"
    ]
    markup.add(*categories)
    markup.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    return markup

def agent_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    formatted_agents = [f"üë§ {agent}" for agent in agents]
    markup.add(*formatted_agents)
    markup.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    return markup

def yes_no_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("‚úÖ –í—ã–≤–µ—Å—Ç–∏", "‚ùå –û—Ç–º–µ–Ω–∞")
    markup.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@bot.message_handler(func=lambda m: m.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_main_menu(message):
    bot.send_message(message.chat.id,
                   "üè° –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                   reply_markup=main_keyboard(message.from_user.id))

# –ü–∞—Ä—Å–∏–Ω–≥ XML
def safe_find(element, path, default=None):
    elem = element.find(path)
    return elem.text if elem is not None else default

def parse_xml(url):
    global properties, agents
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        parsed_url = urlparse(url)
        print(url)
        print(parsed_url.scheme)
        print(parsed_url.netloc)
        if not parsed_url.scheme or not parsed_url.netloc:
            print(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL '{url}'. –£–∫–∞–∂–∏—Ç–µ —Å—Ö–µ–º—É (http/https)")
            return False

        response = requests.get(url)
        root = ET.fromstring(response.content)
        new_properties = []
        new_agents = []

        for offer in root.findall(f'{NAMESPACE}offer'):
            district = safe_find(offer,f'{NAMESPACE}location/{NAMESPACE}district')
            localityName = safe_find(offer, f'{NAMESPACE}location/{NAMESPACE}locality-name')
            subLocalityName = safe_find(offer, f'{NAMESPACE}location/{NAMESPACE}sub-locality-name')
            address = safe_find(offer,f'{NAMESPACE}location/{NAMESPACE}address')
            full_address = ', '.join(
                part for part in [
                    district,
                    localityName,
                    subLocalityName,
                    address
                ] if part
            )
            prop = {
                'id': offer.get('internal-id', 'N/A'),
                'type': safe_find(offer, f'{NAMESPACE}type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'category': safe_find(offer, f'{NAMESPACE}category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'rooms': safe_find(offer, f'{NAMESPACE}rooms', '0'),
                'status': safe_find(offer, f'{NAMESPACE}status', '1'),
                'price': safe_find(offer, f'{NAMESPACE}price/{NAMESPACE}value', '0'),
                'agent': safe_find(offer, f'{NAMESPACE}sales-agent/{NAMESPACE}name', '–ù–µ—Ç –∞–≥–µ–Ω—Ç–∞'),
                'address': full_address,
                'area': safe_find(offer, f'{NAMESPACE}area/{NAMESPACE}value', '0')
            }

            new_properties.append(prop)
            if prop['agent'] not in new_agents:
                new_agents.append(prop['agent'])

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        with open('data.json', 'w', encoding='utf-8') as f:
            json.dump(new_properties, f, ensure_ascii=False, indent=2)

        properties = new_properties
        agents = new_agents
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                    "üè° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!",
                    reply_markup=main_keyboard(message.from_user.id))

def ask_deal_type(message, next_step):
    bot.send_message(message.chat.id,
                   "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:",
                   reply_markup=deal_type_keyboard())
    bot.register_next_step_handler(message, next_step)

@bot.message_handler(func=lambda m: m.text in ["üë§ –ü–æ –∞–≥–µ–Ω—Ç—É", "üë§ –í—ã–±–æ—Ä –ø–æ –ê–≥–µ–Ω—Ç—É"])
def select_agent_flow(message):
    ask_deal_type(message, process_agent_selection)

def process_agent_selection(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return handle_main_menu(message)
    user_data = {'deal_type': message.text.replace("üè† ", "").replace("üí∞ ", "")}
    bot.send_message(message.chat.id,
                   "üë• –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:",
                   reply_markup=agent_keyboard())
    bot.register_next_step_handler(message, process_agent_choice, user_data)

def process_agent_choice(message, user_data):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return handle_main_menu(message)
    user_data['agent'] = message.text.replace("üë§ ", "")
    bot.send_message(message.chat.id,
                   "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                   reply_markup=category_keyboard())
    bot.register_next_step_handler(message, process_category_choice, user_data)

def process_search(message, user_data):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return handle_main_menu(message)
    user_data['market'] = message.text
    filtered = filter_properties(user_data)
    bot.send_message(message.chat.id, f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(filtered)}", reply_markup=yes_no_keyboard())
    bot.register_next_step_handler(message, show_results, filtered)

def show_results(message, filtered):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return handle_main_menu(message)
    if message.text == "‚úÖ –í—ã–≤–µ—Å—Ç–∏":
        for prop in filtered:
            send_property_info(message.chat.id, prop)
            time.sleep(0.5)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard(message.from_user.id))

@bot.message_handler(func=lambda m: m.text in ["üè† –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "üè† –í—ã–±–æ—Ä –ø–æ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"])
def select_category_flow(message):
    ask_deal_type(message, process_category_selection)

def process_category_selection(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return handle_main_menu(message)
    user_data = {'deal_type': message.text.replace("üè† ", "").replace("üí∞ ", "")}
    bot.send_message(message.chat.id,
                   "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                   reply_markup=category_keyboard())
    bot.register_next_step_handler(message, process_category_choice, user_data)

def process_category_choice(message, user_data):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return handle_main_menu(message)
    user_data['category'] = message.text
    filtered = filter_properties(user_data)
    bot.send_message(message.chat.id,
                   f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(filtered)}",
                   reply_markup=yes_no_keyboard())
    bot.register_next_step_handler(message, show_results, filtered)

def filter_properties(data):
    result = []
    for prop in properties:
        match = True

        if 'deal_type' in data:
            match &= (prop['type'].lower() == data['deal_type'].lower())

        if 'agent' in data:
            match &= (prop['agent'] == data['agent'])

        if 'category' in data and data['category'] != "üèòÔ∏è –í—Å–µ":
            category = data['category']
            if category.startswith("üè†"):
                room_count = category.split('-')[0][-1]
                match &= (
                        prop['category'] == "–∫–≤–∞—Ä—Ç–∏—Ä–∞"
                        and prop['rooms'] == room_count
                )
            else:
                category_map = {
                    "üå≥ –£—á–∞—Å—Ç–æ–∫": "—É—á–∞—Å—Ç–æ–∫",
                    "üè° –î–æ–º": "–¥–æ–º",
                    "üöó –ì–∞—Ä–∞–∂": "–≥–∞—Ä–∞–∂",
                    "üö™ –ö–æ–º–Ω–∞—Ç–∞": "–∫–æ–º–Ω–∞—Ç–∞",
                    "üè™ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è": "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è"
                }
                match &= (prop['category'] == category_map.get(category, ""))

        if match:
            result.append(prop)
    return result

def send_property_info(chat_id, prop):
    emoji_map = {
        "–∫–≤–∞—Ä—Ç–∏—Ä–∞": "üè¢", "—É—á–∞—Å—Ç–æ–∫": "üå≥", "–¥–æ–º": "üè†",
        "–≥–∞—Ä–∞–∂": "üöó", "–∫–æ–º–Ω–∞—Ç–∞": "üö™", "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è": "üè™"
    }
    price = format(int(prop['price']), ',') if prop['price'].isdigit() else prop['price']
    if prop['status'] == "1": status = "üü¢ –í–Ω–µ—à–Ω—è—è"
    else:
        status = "üü£ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è"

    text = (
        f"{emoji_map.get(prop['category'], 'üè†')} {prop['category'].capitalize()} ({prop['type'].capitalize()})\n"
        f"üìè –ü–ª–æ—â–∞–¥—å: {prop.get('area', 'N/A')} –º¬≤\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: {prop['rooms']}\n"
        f"üí∞ –¶–µ–Ω–∞: {price} RUB\n"
        f"üìç –ê–¥—Ä–µ—Å: {prop['address']}\n\n"
        f"ü§ù –ë–∞–∑–∞: {status}\n\n"
        f"üë§ –ê–≥–µ–Ω—Ç: {prop['agent']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: http://nn.nmls.ru/realty/view/{prop['id']}"
    )
    bot.send_message(chat_id, text)

@bot.message_handler(func=lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def update_data(message):
    if parse_xml(current_url):
        bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                        reply_markup=main_keyboard(message.from_user.id))
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
                        reply_markup=main_keyboard(message.from_user.id))

@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –°—Å—ã–ª–∫–∞ (–ê–¥–º–∏–Ω)" and m.from_user.id in ADMINS)
def change_url(message):
    bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ XML:")
    bot.register_next_step_handler(message, save_new_url)

def save_new_url(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return handle_main_menu(message)
    global current_url
    current_url = message.text
    with open('url.txt', 'w') as f:
        f.write(current_url)
    bot.send_message(message.chat.id, "‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard(message.from_user.id))

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ polling: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
